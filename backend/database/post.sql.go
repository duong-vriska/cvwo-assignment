// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: post.sql

package db

import (
	"context"
	"database/sql"
)

const categoryPost = `-- name: CategoryPost :many
SELECT id, post_id, title, content, category FROM posts
WHERE category = ?
`

func (q *Queries) CategoryPost(ctx context.Context, category string) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, categoryPost, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.Title,
			&i.Content,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createPost = `-- name: CreatePost :execresult
INSERT INTO posts (
  post_id, title, content, category
) VALUES (
  ?, ?, ?, ? 
)
`

type CreatePostParams struct {
	PostID   string `json:"post_id"`
	Title    string `json:"title"`
	Content  string `json:"content"`
	Category string `json:"category"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPost,
		arg.PostID,
		arg.Title,
		arg.Content,
		arg.Category,
	)
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE post_id = ?
`

func (q *Queries) DeletePost(ctx context.Context, postID string) error {
	_, err := q.db.ExecContext(ctx, deletePost, postID)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, post_id, title, content, category FROM posts
WHERE post_id = ? LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, postID string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, postID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Title,
		&i.Content,
		&i.Category,
	)
	return i, err
}

const listPost = `-- name: ListPost :many
SELECT id, post_id, title, content, category FROM posts
ORDER BY id DESC
`

func (q *Queries) ListPost(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.Title,
			&i.Content,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :execresult
UPDATE posts 
SET 
title = ?,
content = ?,
category = ?
WHERE post_id = ?
`

type UpdatePostParams struct {
	Title    string `json:"title"`
	Content  string `json:"content"`
	Category string `json:"category"`
	PostID   string `json:"post_id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePost,
		arg.Title,
		arg.Content,
		arg.Category,
		arg.PostID,
	)
}
